name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Temurin JDK 배포판 사용

      # Gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: |
          chmod +x gradlew

      # Gradle 빌드
      - name: Gradle Build
        working-directory: ./backend
        run: |
          ./gradlew build

      # Docker 이미지 빌드
      - name: Build Backend Docker image
        working-directory: ./backend
        run: |
          docker build -t hongboemsun682/backend:latest .
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Push Backend Docker image to Docker Hub
        run: |
          docker push hongboemsun682/backend:latest
  build-frontend:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # GitHub 저장소에서 코드를 클론
      
    - name: .env setting
      working-directory: ./frontend
      run: |
        echo "LIVEBLOCKS_SECRET_KEY=${{ secrets.LIVEBLOCKS_SECRET_KEY }}" >> .env
        echo "NEXT_PUBLIC_API_TOKEN=${{ secrets.NEXT_PUBLIC_API_TOKEN }}" >> .env
        echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" >> .env
        echo "NEXT_PUBLIC_BACKEND_URL_D=${{ secrets.NEXT_PUBLIC_BACKEND_URL_D }}" >> .env
        
    # frontend 디렉토리에서 Docker 이미지 빌드
    - name: Build Frontend Docker image
      working-directory: ./frontend  # frontend 폴더에서 작업
      run: |
        docker build -t hongboemsun682/frontend:latest .  # frontend 이미지를 빌드

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Frontend Docker image to Docker Hub
      run: |
        docker push hongboemsun682/frontend:latest  # frontend 이미지를 Docker Hub에 푸시
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]  # backend, frontend 빌드 후에 실행

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up SSH key for EC2 access
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

    - name: SSH into EC2 and Pull & Run Docker Images
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Docker 로그인
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          # Backend Docker 이미지 Pull
          docker pull hongboemsun682/backend:latest

          # Frontend Docker 이미지 Pull
          docker pull hongboemsun682/frontend:latest

          # Backend 컨테이너 실행 (포트 8080)
          docker run -d -p 8080:4040 --name backend   --network back   -e SPRING_DATASOURCE_URL="jdbc:p6spy:mysql://mysql:3306/withme?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true"   -e SPRING_DATASOURCE_USERNAME="root"   -e SPRING_DATASOURCE_PASSWORD="root"   -e SPRING_DATASOURCE_DRIVER_CLASS_NAME="com.p6spy.engine.spy.P6SpyDriver"   hongboemsun682/backend:latest

          # Frontend 컨테이너 실행 (포트 3000)
          docker run -d --name frontend -p 3000:3000 hongboemsun682/frontend:latest
        EOF
